<?php
/**
 * ReturnPolicyAvailability
 *
 * PHP version 5
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AllegroApi\Model;

use \ArrayAccess;
use \AllegroApi\ObjectSerializer;

/**
 * ReturnPolicyAvailability Class Doc Comment
 *
 * @category Class
 * @package  AllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReturnPolicyAvailability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReturnPolicyAvailability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'range' => 'string',
        'restriction_cause' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'range' => null,
        'restriction_cause' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'range' => 'range',
        'restriction_cause' => 'restrictionCause'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'range' => 'setRange',
        'restriction_cause' => 'setRestrictionCause'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'range' => 'getRange',
        'restriction_cause' => 'getRestrictionCause'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RANGE_FULL = 'FULL';
    const RANGE_RESTRICTED = 'RESTRICTED';
    const RESTRICTION_CAUSE_SEALED_MEDIA = 'SEALED_MEDIA';
    const RESTRICTION_CAUSE_SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE = 'SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE';
    const RESTRICTION_CAUSE_CUSTOM_ITEM = 'CUSTOM_ITEM';
    const RESTRICTION_CAUSE_SHORT_SHELF_LIFE = 'SHORT_SHELF_LIFE';
    const RESTRICTION_CAUSE_INSEPARABLY_LINKED = 'INSEPARABLY_LINKED';
    const RESTRICTION_CAUSE_ALCOHOL = 'ALCOHOL';
    const RESTRICTION_CAUSE_PRESS = 'PRESS';
    const RESTRICTION_CAUSE_FULLY_IMPLEMENTED_SERVICE = 'FULLY_IMPLEMENTED_SERVICE';
    const RESTRICTION_CAUSE_MEDICINAL_PRODUCT = 'MEDICINAL_PRODUCT';
    const RESTRICTION_CAUSE_BOOKED_SERVICE = 'BOOKED_SERVICE';
    const RESTRICTION_CAUSE_NOT_RECORDED_DIGITAL_CONTENT = 'NOT_RECORDED_DIGITAL_CONTENT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRangeAllowableValues()
    {
        return [
            self::RANGE_FULL,
            self::RANGE_RESTRICTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRestrictionCauseAllowableValues()
    {
        return [
            self::RESTRICTION_CAUSE_SEALED_MEDIA,
            self::RESTRICTION_CAUSE_SEALED_ITEM_NO_RETURN_DUE_HEALTH_OR_HYGIENE,
            self::RESTRICTION_CAUSE_CUSTOM_ITEM,
            self::RESTRICTION_CAUSE_SHORT_SHELF_LIFE,
            self::RESTRICTION_CAUSE_INSEPARABLY_LINKED,
            self::RESTRICTION_CAUSE_ALCOHOL,
            self::RESTRICTION_CAUSE_PRESS,
            self::RESTRICTION_CAUSE_FULLY_IMPLEMENTED_SERVICE,
            self::RESTRICTION_CAUSE_MEDICINAL_PRODUCT,
            self::RESTRICTION_CAUSE_BOOKED_SERVICE,
            self::RESTRICTION_CAUSE_NOT_RECORDED_DIGITAL_CONTENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['restriction_cause'] = isset($data['restriction_cause']) ? $data['restriction_cause'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRangeAllowableValues();
        if (!is_null($this->container['range']) && !in_array($this->container['range'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'range', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRestrictionCauseAllowableValues();
        if (!is_null($this->container['restriction_cause']) && !in_array($this->container['restriction_cause'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'restriction_cause', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets range
     *
     * @return string|null
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param string|null $range Indicates if return policy is full or restricted.
     *
     * @return $this
     */
    public function setRange($range)
    {
        $allowedValues = $this->getRangeAllowableValues();
        if (!is_null($range) && !in_array($range, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'range', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets restriction_cause
     *
     * @return string|null
     */
    public function getRestrictionCause()
    {
        return $this->container['restriction_cause'];
    }

    /**
     * Sets restriction_cause
     *
     * @param string|null $restriction_cause Type of return policy restrictions. Required if range of policy is set to RESTRICTED.
     *
     * @return $this
     */
    public function setRestrictionCause($restriction_cause)
    {
        $allowedValues = $this->getRestrictionCauseAllowableValues();
        if (!is_null($restriction_cause) && !in_array($restriction_cause, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'restriction_cause', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['restriction_cause'] = $restriction_cause;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


